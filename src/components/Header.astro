---
import TopMenuLink from "./TopMenuLink.astro";
import Logotype from "./Logotype.astro";
import InstagramLink from "./InstagramLink.astro";
---

<astro-header class="lg:sticky lg:top-0 bg-[#f5f4ef] block z-10">
  <header class="flex items-center justify-between py-2">
    <div class="flex items-center justify-center gap-2 2xl:min-w-[210px]">
      <Logotype asLink={Astro.url.pathname !== "/"} />
    </div>
    <nav class="lg:flex-1">
      <ul
        id="main-menu"
        role="menubar"
        aria-label="Основные разделы на странице"
        class="fixed top-0 left-full z-10 bg-[#f5f4ef] text-center transition-left w-full h-full flex items-center justify-center flex-col font-semibold lg:static lg:flex-row lg:pl-16 lg:gap-1 2xl:gap-10"
      >
        <li role="none" class="mb-1 lg:mb-0">
          <TopMenuLink
            href="/#about"
            title="О нас"
            ariaCurrent={Astro.url.pathname === "/#about" ? "page" : undefined}
          />
        </li>
        <li role="none" class="mb-1 lg:mb-0">
          <TopMenuLink
            href="/postanovka-diagnoza"
            title="Постановка диагноза"
            ariaCurrent={Astro.url.pathname === "/postanovka-diagnoza" ? "page" : undefined}
          />
        </li>
        <li role="none" class="mb-1 lg:mb-0">
          <TopMenuLink
            href="/operacija-i-lecheie"
            title="Операция и лечение"
            ariaCurrent={Astro.url.pathname === "/operacija-i-lecheie" ? "page" : undefined}
          />
        </li>
        <li role="none" class="mb-1 lg:mb-0">
          <TopMenuLink
            href="/zhizn-posle-remissija"
            title="Жизнь после и ремиссия"
            ariaCurrent={Astro.url.pathname === "/zhizn-posle-remissija" ? "page" : undefined}
          />
        </li>
        <li
          role="none"
          class="flex items-center justify-center xl:min-w-[210px] 2xl:justify-end"
        >
          <InstagramLink />
        </li>
      </ul>
    </nav>
    <button class="tham tham-e-squeeze tham-w-6 z-10 relative lg:hidden" aria-label="Открыть меню" aria-expanded="false">
      <div class="tham-box">
        <div class="tham-inner"></div>
      </div>
    </button>
  </header>
</astro-header>

<script>
  function getMenuButton(root: HTMLElement) {
    return root.querySelector("button");
  }

  function getMenuNav(root: HTMLElement) {
    return root.querySelector("ul");
  }

  function getMenuItems(nav: HTMLElement, button: HTMLElement) {
    const items = Array.from(nav?.querySelectorAll('[role="menuitem"], a, button') || [])
      .filter(el => (el instanceof HTMLElement) && el.offsetParent !== null);
    if (button && button.offsetParent !== null) items.push(button);
    return items;
  }

  function openMenu(nav: HTMLElement, button: HTMLElement, body: HTMLElement) {
    button.classList.add("tham-active");
    nav.classList.add("left-0");
    nav.classList.remove("left-full");
    body.classList.add("overflow-hidden");
    button.setAttribute("aria-expanded", "true");
    const firstMenuItem = getMenuItems(nav, button)[0];
    if (firstMenuItem instanceof HTMLElement) {
      firstMenuItem.focus();
    }
  }

  function closeMenu(nav: HTMLElement, button: HTMLElement, body: HTMLElement) {
    button.classList.remove("tham-active");
    nav.classList.remove("left-0");
    nav.classList.add("left-full");
    body.classList.remove("overflow-hidden");
    button.setAttribute("aria-expanded", "false");
    button.focus();
  }

  function handleTabTrap(e: KeyboardEvent, nav: HTMLElement, button: HTMLElement) {
    const menuItems = getMenuItems(nav, button);
    if (menuItems.length === 0) return;
    const firstItem = menuItems[0];
    const lastItem = menuItems[menuItems.length - 1];

    if (e.shiftKey) {
      if (document.activeElement === firstItem) {
        e.preventDefault();
        (lastItem as HTMLElement).focus();
      }
    } else {
      if (document.activeElement === lastItem) {
        e.preventDefault();
        (firstItem as HTMLElement).focus();
      }
    }
  }

  class AstroHeader extends HTMLElement {
    connectedCallback() {
      const button = getMenuButton(this);
      const nav = getMenuNav(this);
      const body = document.body;

      button?.addEventListener("click", () => {
        const expanded = button.classList.contains("tham-active");
        if (nav && button) {
          if (expanded) {
            closeMenu(nav, button, body);
          } else {
            openMenu(nav, button, body);
          }
        }
      });

      document.addEventListener("keydown", (e) => {
        if (button?.classList.contains("tham-active") && nav && button) {
          if (e.key === "Escape" || e.key === "Esc") {
            closeMenu(nav, button, body);
          }
          if (e.key === "Tab") {
            handleTabTrap(e, nav, button);
          }
        }
      });
    }
  }

  customElements.define("astro-header", AstroHeader);
</script>
